name: Build and Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  # AWS Region 설정
  AWS_REGION: ap-northeast-2
  # backend ECR Repository 설정
  ECR_REPOSITORY: backend
  # backend ECS Service 설정
  ECS_SERVICE: backend-cluster-service
  # backend ECS Cluster 설정
  ECS_CLUSTER: backend-cluster
  # backend Container Name 설정
  CONTAINER_NAME: backend

permissions:
  contents: read
  security-events: write  # SARIF 파일 업로드 권한

jobs:
  build:
    name: Build and Scan Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # 이미지 빌드 과정
    - name: Build image
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

    # Dockle image pull
    - name: Build Dockle
      run: |
        docker pull goodwithtech/dockle:latest

    # Dockle 보안 스캔
    - name: Run Dockle security scan
      continue-on-error: true
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock goodwithtech/dockle $ECR_REPOSITORY:$IMAGE_TAG

    # Trivy 취약점 스캔
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.20.0
      continue-on-error: true  # 보안 검사 실패 시도 계속 진행
      with:
        image-ref: '${{ env.ECR_REPOSITORY }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    # 취약점 github에 게시
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif

    # 이미지 태그 생성 및 ECR에 image push
    - name: Push image to Amazon ECR
      id: push-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Save appspec.yaml to artifacts
      run: |
        echo "Saving appspec.yaml as an artifact"
      # 앱의 appspec.yaml 파일을 아티팩트로 저장
      uses: actions/upload-artifact@v3
      with:
        name: appspec  # 아티팩트 이름
        path: appspec.yaml  # 저장할 파일 경로

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build  # build job 완료 후 실행
    environment: production

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # 가장 최신의 ECS 작업 정의 JSON 파일 검색
    - name: Retrieve most recent ECS task definition JSON file
      id: retrieve-task-def
      run: |
        TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition backend-def --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV
        aws ecs describe-task-definition --task-definition backend-def --query taskDefinition > task-definition.json
        cat task-definition.json
        echo "::set-output name=task-def-file::task-definition.json"

    # appspec.yaml 파일에서 TaskDefinition에 최신 Task Definition ARN 반영
    - name: Update appspec.yaml with the latest Task Definition ARN
      run: |
        sed -i "s|\"TaskDefinition\": \"\"|\"TaskDefinition\": \"$TASK_DEFINITION_ARN\"|" appspec.yaml

    # Amazon ECS 작업 정의에 새로운 이미지 ID 반영
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.retrieve-task-def.outputs.task-def-file }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.push-image.outputs.image }}

    # ECS 작업 정의를 배포
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        codedeploy-appspec: appspec.yaml
        codedeploy-application: AppECS-backend-cluster-backend-cluster-service
        codedeploy-deployment-group: DgpECS-backend-cluster-backend-cluster-service
