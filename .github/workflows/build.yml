name: Build and Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: backend
  ECS_SERVICE: backend-cluster-service
  ECS_CLUSTER: backend-cluster
  CONTAINER_NAME: backend

permissions:
  contents: read
  security-events: write

jobs:
  build:
    name: Build and Scan Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker Image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Run Dockle Security Scan
      continue-on-error: true
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock goodwithtech/dockle $ECR_REPOSITORY:${{ env.IMAGE_TAG }}

    - name: Run Trivy Vulnerability Scan
      uses: aquasecurity/trivy-action@0.20.0
      continue-on-error: true
      with:
        image-ref: '${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif

    - name: Push Docker Image to Amazon ECR
      if: success()
      run: |
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REPOSITORY:$IMAGE_TAG
        echo "IMAGE_URI=${{ steps.push.outputs.image }}" >> $GITHUB_ENV

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build  # build job이 완료된 후 실행
    environment: production

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Retrieve most recent ECS task definition
      id: retrieve-task-def
      run: |
        TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition backend-def --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV
        aws ecs describe-task-definition --task-definition backend-def --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.IMAGE_URI }}

    - name: Deploy ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true