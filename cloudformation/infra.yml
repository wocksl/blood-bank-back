AWSTemplateFormatVersion: "2010-09-09"
Description: Network resource template part1
#########################################################
Resources:
  # VPC, IGW설정
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: VPC
  # 인터넷 접속을 위한 게이트웨이 생성
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: igw
  VpcgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: IGW
  ############### Subnet, RouteTable ###############
  # 컨테이너 관련 설정 
  ## 컨테이너 애플리케이션용 프라이빗 서브넷
  SubnetPrivateContainer1A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.8.0/24
      VpcId:
        Ref: VPC
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: subnet-private-container-1a
        - Key: Type
          Value: Isolated
  SubnetPrivateContainer1C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.9.0/24
      VpcId:
        Ref: VPC
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: subnet-private-container-1c
        - Key: Type
          Value: Isolated
  ## 컨테이너 애플리케이션용 라우팅 테이블
  RouteApp:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: route-app
  ## 컨테이너 서브넷과 라우팅 연결
  RouteAppAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteApp
      SubnetId:
        Ref: SubnetPrivateContainer1A
  RouteAppAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteApp
      SubnetId:
        Ref: SubnetPrivateContainer1C

  # DB관련 설정
  ## DB용 프라이빗 서브넷
  SubnetPrivateDb1A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.16.0/24
      VpcId:
        Ref: VPC
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: subnet-private-db-1a
        - Key: Type
          Value: Isolated
  SubnetPrivateDb1C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.17.0/24
      VpcId:
        Ref: VPC
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: subnet-private-db-1c
        - Key: Type
          Value: Isolated
  ## DB용 라우팅 테이블
  RouteDb:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: route-db
  ## DB 서브넷에 라우팅 연결
  RouteDbAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteDb
      SubnetId:
        Ref: SubnetPrivateDb1A
  RouteDbAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteDb
      SubnetId:
        Ref: SubnetPrivateDb1C
  
  # Ingress 관련 설정
  ## Ingress용 퍼블릭 서브넷
  SubnetPublicIngress1A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: VPC
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: subnet-public-ingress-1a
        - Key: Type
          Value: Public
  SubnetPublicIngress1C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: VPC
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: subnet-public-ingress-1c
        - Key: Type
          Value: Public
  ## Ingress용 라우팅 테이블
  RouteIngress:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: route-ingress
  ## Ingress용 서브넷에 라우팅 연결
  RouteIngressAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteIngress
      SubnetId:
        Ref: SubnetPublicIngress1A
  RouteIngressAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteIngress
      SubnetId:
        Ref: SubnetPublicIngress1C
  ## Ingress용 라우팅 테이블의 기본 라우팅
  RouteIngressDefault:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteIngress
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: IGW
    DependsOn:
      - VpcgwAttachment

  # 관리 서버 관련 설정
  ## 관리용 퍼블릭 서브넷
  SubnetPublicManagement1A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.240.0/24
      VpcId:
        Ref: VPC
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: subnet-public-management-1a
        - Key: Type
          Value: Public
  SubnetPublicManagement1C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.241.0/24
      VpcId:
        Ref: VPC
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: subnet-public-management-1c
        - Key: Type
          Value: Public
  ## 관리용 서브넷의 라우팅은 Ingress와 동일하게 생성
  RouteManagementAssociation1A:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteIngress
      SubnetId:
        Ref: SubnetPublicManagement1A
  RouteManagementAssociation1C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteIngress
      SubnetId:
        Ref: SubnetPublicManagement1C
  
  # VPC 엔드포인트 관련 설정
  ## VPC 엔드포인트(Egress통신)용 프라이빗 서브넷
  SubnetPrivateEgress1A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.248.0/24
      VpcId:
        Ref: VPC
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: subnet-private-egress-1a
        - Key: Type
          Value: Isolated
  SubnetPrivateEgress1C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.249.0/24
      VpcId:
        Ref: VPC
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: subnet-private-egress-1c
        - Key: Type
          Value: Isolated
  
  ############### Security groups ###############
  # 보안 그룹 생성
  ## 인터넷 공개용 보안 그룹 생성
  SgIngress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ingress
      GroupName: ingress
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:3000
          FromPort: 3000
          IpProtocol: tcp
          ToPort: 3000
        - CidrIpv6: ::/0
          Description: from ::/0:3000
          FromPort: 3000
          IpProtocol: tcp
          ToPort: 3000
      Tags:
        - Key: Name
          Value: sg-ingress
      VpcId:
        Ref: VPC
  ## 관리 서버용 보안 그룹 생성
  SgManagement:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of management server
      GroupName: management
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: sg-management
      VpcId:
        Ref: VPC
  ## 백엔드 컨테이너 애플리케이션용 보안 그룹 생성
  SgContainer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of backend app
      GroupName: container
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: sg-container
      VpcId:
        Ref: VPC
  ## 프론트엔드 컨테이너 애플리케이션용 보안 그룹 생성
  SgFrontContainer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of front container app
      GroupName: front-container
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: sg-front-container
      VpcId:
        Ref: VPC
  ## 내부용 로드밸런서의 보안 그룹 생성
  SgInternal:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for internal load balancer
      GroupName: internal
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: sg-internal
      VpcId:
        Ref: VPC
  ## DB용 보안 그룹 생성
  SgDb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of database
      GroupName: database
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: sg-db
      VpcId:
        Ref: VPC
  ## VPC 엔드포인트용 보안 그룹 설정
  SgEgress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of VPC Endpoint
      GroupName: egress
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: sg-vpce
      VpcId:
        Ref: VPC

  # 역할 연결
  ## Internet LB -> Front Container
  SgFrontContainerFromsSgIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTP for Ingress
      FromPort: 3000
      GroupId:
        Fn::GetAtt:
          - SgFrontContainer
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SgIngress
          - GroupId
      ToPort: 3000
  ## Front Container -> Internal LB
  SgInternalFromSgFrontContainer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTP for front container
      FromPort: 3001
      GroupId:
        Fn::GetAtt:
          - SgInternal
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SgFrontContainer
          - GroupId
      ToPort: 3001
  ## Internal LB -> Back Container
  SgContainerFromSgInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTP for internal lb
      FromPort: 3001
      GroupId:
        Fn::GetAtt:
          - SgContainer
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SgInternal
          - GroupId
      ToPort: 3001 
  ## Back container -> DB
  SgDbFromSgContainerTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: MySQL protocol from backend App
      FromPort: 3306
      GroupId:
        Fn::GetAtt:
          - SgDb
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SgContainer
          - GroupId
      ToPort: 3306
  ## Front container -> DB
  SgDbFromSgFrontContainerTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: MySQL protocol from frontend App
      FromPort: 3306
      GroupId:
        Fn::GetAtt:
          - SgDb
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SgFrontContainer
          - GroupId
      ToPort: 3306
  ## Management server -> DB
  SgDbFromSgManagementTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: MySQL protocol from management server
      FromPort: 3306
      GroupId:
        Fn::GetAtt:
          - SgDb
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SgManagement
          - GroupId
      ToPort: 3306  
  ## Management server -> Internal LB
  SgInternalFromSgManagementTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTP for management server
      FromPort: 3001
      GroupId:
        Fn::GetAtt:
          - SgInternal
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SgManagement
          - GroupId
      ToPort: 3001

  ### Back container -> VPC endpoint
  SgVpceFromSgContainerTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTPS for Container App
      FromPort: 443
      GroupId:
        Fn::GetAtt:
          - SgEgress
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SgContainer
          - GroupId
      ToPort: 443
  ### Front container -> VPC endpoint
  SgVpceFromSgFrontContainerTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTPS for Front Container App
      FromPort: 443
      GroupId:
        Fn::GetAtt:
          - SgEgress
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SgFrontContainer
          - GroupId
      ToPort: 443
  ### Management Server -> VPC endpoint
  SgVpceFromSgManagementTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTPS for management server
      FromPort: 443
      GroupId:
        Fn::GetAtt:
          - SgEgress
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SgManagement
          - GroupId
      ToPort: 443

  ### VPC 엔드포인트 생성
  ECRApiVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      VpcId: # 사용할 VPC ID
        Ref: VPC
      ServiceName: com.amazonaws.ap-northeast-2.ecr.api
      SubnetIds:
        - !Ref SubnetPrivateEgress1A  # 사용할 서브넷의 ID
        - !Ref SubnetPrivateEgress1C
      SecurityGroupIds:
        - !Ref SgEgress  # VPC 엔드포인트에 사용할 보안 그룹
      PrivateDnsEnabled: true  # 비공개 DNS 사용 여부 (기본값: true)

  ECRDkrVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      VpcId: # 사용할 VPC ID
        Ref: VPC
      ServiceName: com.amazonaws.ap-northeast-2.ecr.dkr
      SubnetIds:
        - !Ref SubnetPrivateEgress1A  # 사용할 서브넷의 ID
        - !Ref SubnetPrivateEgress1C
      SecurityGroupIds:
        - !Ref SgEgress  # VPC 엔드포인트에 사용할 보안 그룹
      PrivateDnsEnabled: true  # 비공개 DNS 사용 여부 (기본값: true)

  LogsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      VpcId: # 사용할 VPC ID
        Ref: VPC
      ServiceName: com.amazonaws.ap-northeast-2.logs
      SubnetIds:
        - !Ref SubnetPrivateEgress1A  # 사용할 서브넷의 ID
        - !Ref SubnetPrivateEgress1C
      SecurityGroupIds:
        - !Ref SgEgress  # VPC 엔드포인트에 사용할 보안 그룹
      PrivateDnsEnabled: true  # 비공개 DNS 사용 여부 (기본값: true)

  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      VpcId: # 사용할 VPC ID
        Ref: VPC
      ServiceName: com.amazonaws.ap-northeast-2.secretsmanager
      SubnetIds:
        - !Ref SubnetPrivateEgress1A  # 사용할 서브넷의 ID
        - !Ref SubnetPrivateEgress1C
      SecurityGroupIds:
        - !Ref SgEgress  # VPC 엔드포인트에 사용할 보안 그룹
      PrivateDnsEnabled: true  # 비공개 DNS 사용 여부 (기본값: true)

  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      VpcId:
        Ref: VPC
      ServiceName: com.amazonaws.ap-northeast-2.s3
      RouteTableIds:
        - !Ref RouteApp

  ### ALB, TG 생성
  # TG 생성
  BackendALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: backend-tg
      Port: 3001
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPort: "3001"
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-499

  FrontendALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: frontend-tg
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPort: "3000"
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-499
  
  # ALB 생성
  BackendALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: IGW
    Properties:
      Name: backend-alb
      Scheme: internal
      SecurityGroups:
        - !Ref SgInternal
      Subnets:
        - !Ref SubnetPrivateContainer1A
        - !Ref SubnetPrivateContainer1C

  FrontendALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: IGW
    Properties:
      Name: frontend-alb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SgIngress
      Subnets:
        - !Ref SubnetPublicIngress1A
        - !Ref SubnetPublicIngress1C
  
  # 리스너 생성
  BackendALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendALBTargetGroup
      LoadBalancerArn: !Ref BackendALB
      Port: 3001
      Protocol: HTTP

  FrontendALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendALBTargetGroup
      LoadBalancerArn: !Ref FrontendALB
      Port: 3000
      Protocol: HTTP

  ### ECR Repo 생성
  BackendECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: backend  # ECR 레포지토리 이름
      ImageTagMutability: MUTABLE  # 태그 변경 가능성 설정
      EncryptionConfiguration:
        EncryptionType: KMS  # AWS KMS 암호화 사용
        KmsKey: alias/aws/ecr  # AWS 관리형 KMS 키 (관리형 KMS 키 사용 시 기본값)

  FrontendECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: frontend  # ECR 레포지토리 이름
      ImageTagMutability: MUTABLE  # 태그 변경 가능성 설정
      EncryptionConfiguration:
        EncryptionType: KMS  # AWS KMS 암호화 사용
        KmsKey: alias/aws/ecr  # AWS 관리형 KMS 키 (관리형 KMS 키 사용 시 기본값)

##### 09/28 추가 내용 #####
  # 1. monitoring EP
  MonitoringVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      VpcId: # 사용할 VPC ID
        Ref: VPC
      ServiceName: com.amazonaws.ap-northeast-2.monitoring
      SubnetIds:
        - !Ref SubnetPrivateMonitoring1A  # 사용할 서브넷의 ID
        - !Ref SubnetPrivateMonitoring1C
      SecurityGroupIds:
        - !Ref SgMonitoring  # VPC 엔드포인트에 사용할 보안 그룹
      PrivateDnsEnabled: true  # 비공개 DNS 사용 여부 (기본값: true)

  # 2. monitoring 용 subnet (라우팅 테이블 연결 x 기본 라우팅 테이블 사용)
  SubnetPrivateMonitoring1A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.230.0/24
      VpcId:
        Ref: VPC
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: subnet-private-monitoring-1a
        - Key: Type
          Value: Isolated
  SubnetPrivateMonitoring1C:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.231.0/24
      VpcId:
        Ref: VPC
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: subnet-private-monitoring-1c
        - Key: Type
          Value: Isolated
          
  # Monitoring ec2용 보안그룹
  SgMonitoring:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Monitoring
      GroupName: Monitoring
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: cloudwatch-exporter port
          FromPort: 9106
          IpProtocol: tcp
          ToPort: 9106
        - CidrIp: 0.0.0.0/0
          Description: grafana port
          FromPort: 3030
          IpProtocol: tcp
          ToPort: 3030
        - CidrIp: 0.0.0.0/0
          Description: prometheus port
          FromPort: 9090
          IpProtocol: tcp
          ToPort: 9090
        - CidrIp: 0.0.0.0/0
          Description: https port
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: http port
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: ssh port
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: Name
          Value: sg-monitoring
      VpcId:
        Ref: VPC
  
  # egress 보안그룹에 경로 추가 (for monitoring EP)
  SgVpceFromSgMonitoringTCP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: HTTPS for Monitoring server
      FromPort: 443
      GroupId:
        Fn::GetAtt:
          - SgEgress
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SgMonitoring
          - GroupId
      ToPort: 443
  
  # bastion ec2용 보안그룹
  SgBastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Bastion
      GroupName: Bastion
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: ssh port
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: Name
          Value: sg-bastion
      VpcId:
        Ref: VPC